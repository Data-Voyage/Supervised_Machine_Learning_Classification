{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":65711,"databundleVersionId":7405009,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/htonmoy19/bank-churn-class-prediction?scriptVersionId=193652595\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-23T01:49:07.171549Z","iopub.execute_input":"2024-08-23T01:49:07.172154Z","iopub.status.idle":"2024-08-23T01:49:07.184801Z","shell.execute_reply.started":"2024-08-23T01:49:07.172119Z","shell.execute_reply":"2024-08-23T01:49:07.183341Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data = pd.read_csv('/kaggle/input/playground-series-s4e1/train.csv')\ntest_data = pd.read_csv('/kaggle/input/playground-series-s4e1/test.csv')\ntrain_data.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:07.186937Z","iopub.execute_input":"2024-08-23T01:49:07.187548Z","iopub.status.idle":"2024-08-23T01:49:07.798117Z","shell.execute_reply.started":"2024-08-23T01:49:07.187503Z","shell.execute_reply":"2024-08-23T01:49:07.796828Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.describe(include='all')","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:07.799594Z","iopub.execute_input":"2024-08-23T01:49:07.799958Z","iopub.status.idle":"2024-08-23T01:49:08.085349Z","shell.execute_reply.started":"2024-08-23T01:49:07.799926Z","shell.execute_reply":"2024-08-23T01:49:08.083964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Identify duplicate rows\nduplicateRows = train_data[train_data.duplicated()]\n\n# View duplicate rows\nprint(duplicateRows)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:08.088545Z","iopub.execute_input":"2024-08-23T01:49:08.089265Z","iopub.status.idle":"2024-08-23T01:49:08.208244Z","shell.execute_reply.started":"2024-08-23T01:49:08.089216Z","shell.execute_reply":"2024-08-23T01:49:08.206985Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df1 = train_data.drop(['id','CustomerId','Surname'], axis=1)\ndf1.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:08.210213Z","iopub.execute_input":"2024-08-23T01:49:08.210643Z","iopub.status.idle":"2024-08-23T01:49:08.239723Z","shell.execute_reply.started":"2024-08-23T01:49:08.210607Z","shell.execute_reply":"2024-08-23T01:49:08.238464Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_data = test_data.drop(['id','CustomerId','Surname'], axis=1)\ntest_data.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:08.241574Z","iopub.execute_input":"2024-08-23T01:49:08.242321Z","iopub.status.idle":"2024-08-23T01:49:08.271137Z","shell.execute_reply.started":"2024-08-23T01:49:08.242275Z","shell.execute_reply":"2024-08-23T01:49:08.269593Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder, StandardScaler\nLE = LabelEncoder()\ndf1['Geography'] = LE.fit_transform(df1['Geography'])\ndf1['Gender'] = LE.fit_transform(df1['Gender'])\ntest_data['Geography'] = LE.fit_transform(test_data['Geography'])\ntest_data['Gender'] = LE.fit_transform(test_data['Gender'])\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:08.273475Z","iopub.execute_input":"2024-08-23T01:49:08.274099Z","iopub.status.idle":"2024-08-23T01:49:08.458641Z","shell.execute_reply.started":"2024-08-23T01:49:08.274051Z","shell.execute_reply":"2024-08-23T01:49:08.457584Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"corr=pd.DataFrame(df1.corr()['Exited'].values,index=df1.columns)\ncorr.rename(columns={0:\"Relation\"},inplace=True)\ncorr.sort_values(by=\"Relation\",ascending=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:08.46065Z","iopub.execute_input":"2024-08-23T01:49:08.461115Z","iopub.status.idle":"2024-08-23T01:49:08.539809Z","shell.execute_reply.started":"2024-08-23T01:49:08.461073Z","shell.execute_reply":"2024-08-23T01:49:08.5386Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = df1.drop(['Exited'], axis=1)\ny= df1['Exited']\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\ntest_data =scaler.transform(test_data)\nprint('Shape of Features:', X.shape)\nprint('Shape of Target:', y.shape)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:08.543816Z","iopub.execute_input":"2024-08-23T01:49:08.544212Z","iopub.status.idle":"2024-08-23T01:49:08.602346Z","shell.execute_reply.started":"2024-08-23T01:49:08.544181Z","shell.execute_reply":"2024-08-23T01:49:08.601086Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.feature_selection import f_classif\nf_statistic, p_values = f_classif(X, y)\nprint(\"F-values:\", f_statistic)\nprint(\"P-values:\", p_values)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:08.604349Z","iopub.execute_input":"2024-08-23T01:49:08.60482Z","iopub.status.idle":"2024-08-23T01:49:08.646719Z","shell.execute_reply.started":"2024-08-23T01:49:08.604779Z","shell.execute_reply":"2024-08-23T01:49:08.645429Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, stratify=y, test_size=0.2, random_state=365)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:08.648803Z","iopub.execute_input":"2024-08-23T01:49:08.649288Z","iopub.status.idle":"2024-08-23T01:49:08.75183Z","shell.execute_reply.started":"2024-08-23T01:49:08.649245Z","shell.execute_reply":"2024-08-23T01:49:08.750445Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nmodel_rfc = RandomForestClassifier()\n\nparams = {\n    'n_estimators': [x for x in np.linspace(50, 100, num = 20).astype('int')],\n    'max_depth': [5, 8, 15, 25, 30],\n    'min_samples_split': [2, 5, 10, 15, 100],\n    'min_samples_leaf': [1, 2, 5, 10],\n    'criterion': ['gini', 'entropy', 'log_loss'],\n    'max_features': ['sqrt', 'log2', None]\n\n}\nmodel_1=RandomizedSearchCV(model_rfc, param_distributions = params, n_iter = 10, cv = 5, verbose=2, random_state=365, n_jobs = -1)\nmodel_1.fit(X_train,y_train)\nmodel_1.best_params_","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:52:00.694107Z","iopub.execute_input":"2024-08-23T00:52:00.69456Z","iopub.status.idle":"2024-08-23T00:56:57.933734Z","shell.execute_reply.started":"2024-08-23T00:52:00.694525Z","shell.execute_reply":"2024-08-23T00:56:57.931998Z"}}},{"cell_type":"markdown","source":"model_1.best_score_","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:58:12.577825Z","iopub.execute_input":"2024-08-23T00:58:12.579294Z","iopub.status.idle":"2024-08-23T00:58:12.587489Z","shell.execute_reply.started":"2024-08-23T00:58:12.57923Z","shell.execute_reply":"2024-08-23T00:58:12.586156Z"}}},{"cell_type":"markdown","source":"model_rf = model.best_estimator_\nmodel_rf.fit(X_train,y_train)\npred_1 = model_rf.predict(X_valid)\naccuracy = accuracy_score(y_valid, pred_1)\nclassification_rep = classification_report(y_valid, pred_1)\n\nprint(f\"Accuracy: {accuracy:.3f}\")\nprint(\"\\nClassification Report:\\n\", classification_rep)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:01:00.115074Z","iopub.execute_input":"2024-08-23T01:01:00.115564Z","iopub.status.idle":"2024-08-23T01:01:24.961636Z","shell.execute_reply.started":"2024-08-23T01:01:00.115531Z","shell.execute_reply":"2024-08-23T01:01:24.960194Z"}}},{"cell_type":"code","source":"from xgboost import XGBClassifier\n\nmodel_xgb = XGBClassifier(colsample_bylevel= 0.9,\n                    learning_rate=0.2,\n                    colsample_bytree = 0.8, \n                    gamma=0.99,\n                    max_depth= 20,\n                    min_child_weight= 1,\n                    n_estimators= 100,\n                    nthread= 4,\n                    random_state= 365)\nmodel_xgb.fit(X_train, y_train)\n\npred_2 = model_xgb.predict(X_valid)\n\naccuracy = accuracy_score(y_valid, pred_2)\nclassification_rep = classification_report(y_valid, pred_2)\n\nprint(f\"Accuracy: {accuracy:.3f}\")\nprint(\"\\nClassification Report:\\n\", classification_rep)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:08.753442Z","iopub.execute_input":"2024-08-23T01:49:08.754234Z","iopub.status.idle":"2024-08-23T01:49:10.258201Z","shell.execute_reply.started":"2024-08-23T01:49:08.7542Z","shell.execute_reply":"2024-08-23T01:49:10.256902Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import GridSearchCV\n\n#Define the model\nxgb = XGBClassifier()\n\n#Define the parameter grid\nparam_grid = {\n    'eta': [0.01, 0.1, 0.2],\n    'max_depth': [3, 5, 7],\n    'min_child_weight': [1, 3, 5],\n    'subsample': [0.7, 0.8, 0.9],\n    'colsample_bytree': [0.7, 0.8, 0.9],\n    'alpha': [0, 0.1, 0.5],\n    'lambda': [0, 0.1, 0.5]\n}\n\n#Set up GridSearchCV\ngrid_search = GridSearchCV(estimator=xgb, param_grid=param_grid, scoring='accuracy', cv=3, verbose=1)\n\n#Fit the model\ngrid_search.fit(X_train, y_train)\n\n#Best parameters\nprint(\"Best parameters found: \", grid_search.best_params_)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:37:56.508393Z","iopub.execute_input":"2024-08-23T00:37:56.508848Z","iopub.status.idle":"2024-08-23T00:50:34.328408Z","shell.execute_reply.started":"2024-08-23T00:37:56.508814Z","shell.execute_reply":"2024-08-23T00:50:34.325868Z"}}},{"cell_type":"code","source":"from sklearn.metrics import roc_auc_score, roc_curve\n#roc_auc = roc_auc_score(y_valid, pred_1)\n#print(f\"ROC AUC Score RandomForest: {roc_auc:.3f}\")\nroc_auc = roc_auc_score(y_valid, pred_2)\nprint(f\"ROC AUC Score XGBoost: {roc_auc:.3f}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:10.259721Z","iopub.execute_input":"2024-08-23T01:49:10.260103Z","iopub.status.idle":"2024-08-23T01:49:10.279258Z","shell.execute_reply.started":"2024-08-23T01:49:10.260071Z","shell.execute_reply":"2024-08-23T01:49:10.277733Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Feature selection\nfrom sklearn.feature_selection import RFE\n\n# Initialize RFE\nrfe = RFE(model_xgb, n_features_to_select=10)\n\n# Fit RFE\nrfe.fit(X_train, y_train)\n\n# Selected features\nselected_features = rfe.support_\nprint(\"Selected Features:\", selected_features)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:10.281034Z","iopub.execute_input":"2024-08-23T01:49:10.281596Z","iopub.status.idle":"2024-08-23T01:49:11.721021Z","shell.execute_reply.started":"2024-08-23T01:49:10.281555Z","shell.execute_reply":"2024-08-23T01:49:11.719731Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fpr, tpr, _ = roc_curve(y_valid, pred_2)\nplt.plot(fpr, tpr, marker='.')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:11.723152Z","iopub.execute_input":"2024-08-23T01:49:11.724067Z","iopub.status.idle":"2024-08-23T01:49:12.033835Z","shell.execute_reply.started":"2024-08-23T01:49:11.724008Z","shell.execute_reply":"2024-08-23T01:49:12.032342Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:12.035505Z","iopub.execute_input":"2024-08-23T01:49:12.035886Z","iopub.status.idle":"2024-08-23T01:49:12.044207Z","shell.execute_reply.started":"2024-08-23T01:49:12.035854Z","shell.execute_reply":"2024-08-23T01:49:12.042951Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_xgb.fit(X,y)\nproba_1=model_xgb.predict_proba(test_data)[:,1]\nproba_1","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:12.045747Z","iopub.execute_input":"2024-08-23T01:49:12.046212Z","iopub.status.idle":"2024-08-23T01:49:13.92095Z","shell.execute_reply.started":"2024-08-23T01:49:12.046163Z","shell.execute_reply":"2024-08-23T01:49:13.920034Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission = pd.read_csv(\"/kaggle/input/playground-series-s4e1/sample_submission.csv\")\nsubmission['Exited']=proba_1\nsubmission.to_csv(\"submission.csv\", index=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T01:49:13.927087Z","iopub.execute_input":"2024-08-23T01:49:13.928655Z","iopub.status.idle":"2024-08-23T01:49:14.260163Z","shell.execute_reply.started":"2024-08-23T01:49:13.928611Z","shell.execute_reply":"2024-08-23T01:49:14.258904Z"},"trusted":true},"execution_count":null,"outputs":[]}]}